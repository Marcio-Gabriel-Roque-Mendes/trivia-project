{"ast":null,"code":"var _jsxFileName = \"/home/marcio/Documentos/Projetos/TodosProjetos/Portfolio/Project Trivia enviado GitHub/triviaa-game/src/components/CardGame.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { getQuestion } from '../services/fethApiTrivia';\nimport './CardGame.css';\nimport NextButton from './NextButton';\nimport { score as saveScore } from '../store/Actions';\nimport shuffleAnswers from '../services/shuffleAnswers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass CardGame extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      questions: [],\n      answers: [],\n      isClicked: false,\n      count: 0,\n      secondsAmount: 30,\n      timeOver: false\n    };\n\n    this.handleNextButton = () => {\n      const {\n        count\n      } = this.state;\n      const {\n        history\n      } = this.props;\n      const LAST_QUESTION = 4;\n      this.setState(prevState => ({\n        count: prevState.count + 1,\n        isClicked: false,\n        timeOver: false,\n        secondsAmount: 30\n      }), this.startTimer());\n\n      if (count === LAST_QUESTION) {\n        history.push('/feedback');\n      }\n    };\n\n    this.handleTimeOver = () => {\n      clearInterval(this.intervalId);\n      this.setState({\n        secondsAmount: 'Over',\n        timeOver: true,\n        isClicked: true\n      });\n    };\n\n    this.handleButtonClick = item => {\n      clearInterval(this.intervalId);\n      const difficultyValue = {\n        hard: 3,\n        medium: 2,\n        easy: 1\n      };\n      const POINT = 10;\n      const {\n        dispatchScore\n      } = this.props;\n      const {\n        secondsAmount\n      } = this.state;\n      const {\n        className,\n        difficulty\n      } = item;\n\n      if (className.includes('correct-answer')) {\n        const valor = POINT + secondsAmount * difficultyValue[difficulty];\n        dispatchScore(valor);\n      }\n\n      this.setState({\n        isClicked: true\n      });\n    };\n\n    this.startTimer = () => {\n      const ONE_SECOND_IN_MS = 1000;\n      this.intervalId = setInterval(() => {\n        this.setState(prevState => ({\n          secondsAmount: prevState.secondsAmount - 1\n        }));\n      }, ONE_SECOND_IN_MS);\n    };\n  }\n\n  async componentDidMount() {\n    const response = await getQuestion();\n    this.setState({\n      questions: response,\n      answers: shuffleAnswers(response)\n    });\n    this.startTimer();\n  }\n\n  componentDidUpdate() {\n    const {\n      secondsAmount\n    } = this.state;\n\n    if (secondsAmount === 0) {\n      this.handleTimeOver();\n    }\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.intervalId);\n  }\n\n  render() {\n    const {\n      questions,\n      isClicked,\n      secondsAmount,\n      timeOver,\n      answers,\n      count\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"leading-8\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        \"data-testid\": \"meu-jogo\",\n        children: \"Meu Jogo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        \"data-testid\": \"timer\",\n        children: String(secondsAmount).padStart(2, '0')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), questions.length && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"my-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          \"data-testid\": \"question-category\",\n          children: questions[count].category\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          \"data-testid\": \"question-text\",\n          className: \"leading-6 h-12\",\n          children: questions[count].question\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          \"data-testid\": \"answer-options\",\n          className: \"flex items-center justify-center flex-wrap h-24\",\n          children: answers[count].map(question => question.answer && /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            \"data-testid\": question.dataTestId,\n            onClick: () => this.handleButtonClick(question),\n            disabled: timeOver,\n            className: `btn btn-primary btn-outline ${isClicked ? question.className : undefined} w-1/2 my-3`,\n            difficulty: question.difficulty,\n            children: question.answer\n          }, question.dataTestId, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 21\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"h-16\",\n          children: isClicked && /*#__PURE__*/_jsxDEV(NextButton, {\n            onClick: this.handleNextButton\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this);\n  }\n\n} // SÃ³ para commitar\n\n\nCardGame.propTypes = {\n  // name: PropTypes.string.isRequired,\n  // score: PropTypes.number.isRequired,\n  // gravatarEmail: PropTypes.string.isRequired,\n  dispatchScore: PropTypes.func.isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired\n  }).isRequired\n};\n\nconst mapDispatchToProps = dispatch => ({\n  dispatchScore: state => dispatch(saveScore(state))\n});\n\nconst mapStateToProps = globalState => ({\n  name: globalState.player.name,\n  gravatarEmail: globalState.player.gravatarEmail,\n  score: globalState.player.score\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CardGame);","map":{"version":3,"names":["React","PropTypes","connect","getQuestion","NextButton","score","saveScore","shuffleAnswers","CardGame","Component","state","questions","answers","isClicked","count","secondsAmount","timeOver","handleNextButton","history","props","LAST_QUESTION","setState","prevState","startTimer","push","handleTimeOver","clearInterval","intervalId","handleButtonClick","item","difficultyValue","hard","medium","easy","POINT","dispatchScore","className","difficulty","includes","valor","ONE_SECOND_IN_MS","setInterval","componentDidMount","response","componentDidUpdate","componentWillUnmount","render","String","padStart","length","category","question","map","answer","dataTestId","undefined","propTypes","func","isRequired","shape","mapDispatchToProps","dispatch","mapStateToProps","globalState","name","player","gravatarEmail"],"sources":["/home/marcio/Documentos/Projetos/TodosProjetos/Portfolio/Project Trivia enviado GitHub/triviaa-game/src/components/CardGame.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { getQuestion } from '../services/fethApiTrivia';\nimport './CardGame.css';\nimport NextButton from './NextButton';\nimport { score as saveScore } from '../store/Actions';\nimport shuffleAnswers from '../services/shuffleAnswers';\n\nclass CardGame extends React.Component {\n  state = {\n    questions: [],\n    answers: [],\n    isClicked: false,\n    count: 0,\n    secondsAmount: 30,\n    timeOver: false,\n  };\n\n  async componentDidMount() {\n    const response = await getQuestion();\n    this.setState({\n      questions: response,\n      answers: shuffleAnswers(response),\n    });\n    this.startTimer();\n  }\n\n  componentDidUpdate() {\n    const { secondsAmount } = this.state;\n    if (secondsAmount === 0) {\n      this.handleTimeOver();\n    }\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.intervalId);\n  }\n\n  handleNextButton = () => {\n    const { count } = this.state;\n    const { history } = this.props;\n    const LAST_QUESTION = 4;\n\n    this.setState(\n      (prevState) => ({\n        count: prevState.count + 1,\n        isClicked: false,\n        timeOver: false,\n        secondsAmount: 30,\n      }),\n      this.startTimer()\n    );\n    if (count === LAST_QUESTION) {\n      history.push('/feedback');\n    }\n  };\n\n  handleTimeOver = () => {\n    clearInterval(this.intervalId);\n    this.setState({\n      secondsAmount: 'Over',\n      timeOver: true,\n      isClicked: true,\n    });\n  };\n\n  handleButtonClick = (item) => {\n    clearInterval(this.intervalId);\n    const difficultyValue = {\n      hard: 3,\n      medium: 2,\n      easy: 1,\n    };\n\n    const POINT = 10;\n    const { dispatchScore } = this.props;\n    const { secondsAmount } = this.state;\n    const { className, difficulty } = item;\n    \n    if (className.includes('correct-answer')) {\n      const valor = POINT + secondsAmount * difficultyValue[difficulty];\n      dispatchScore(valor);\n    }\n    this.setState({ isClicked: true });\n  };\n\n  startTimer = () => {\n    const ONE_SECOND_IN_MS = 1000;\n    this.intervalId = setInterval(() => {\n      this.setState((prevState) => ({\n        secondsAmount: prevState.secondsAmount - 1,\n      }));\n    }, ONE_SECOND_IN_MS);\n  };\n\n  render() {\n    const { questions, isClicked, secondsAmount, timeOver, answers, count } =\n      this.state;\n    return (\n      <div className='leading-8'>\n        <p data-testid='meu-jogo'>Meu Jogo</p>\n        <span data-testid='timer'>\n          {String(secondsAmount).padStart(2, '0')}\n        </span>\n        {questions.length && (\n          <div className='my-3'>\n            <p data-testid='question-category'>{questions[count].category}</p>\n            <p data-testid='question-text' className='leading-6 h-12'>\n              {questions[count].question}\n            </p>\n            <div\n              data-testid='answer-options'\n              className='flex items-center justify-center flex-wrap h-24'\n              >\n              {answers[count].map(\n                (question) =>\n                  question.answer && (\n                    <button\n                      key={question.dataTestId}\n                      type='button'\n                      data-testid={question.dataTestId}\n                      onClick={() => this.handleButtonClick(question)}\n                      disabled={timeOver}\n                      className={`btn btn-primary btn-outline ${\n                        isClicked ? question.className : undefined\n                      } w-1/2 my-3`}\n                      difficulty={question.difficulty}>\n                      {question.answer}\n                    </button>\n                  )\n              )}\n            </div>\n            <div className='h-16'>\n              {isClicked && <NextButton onClick={this.handleNextButton} />}\n            </div>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n// SÃ³ para commitar\nCardGame.propTypes = {\n  // name: PropTypes.string.isRequired,\n  // score: PropTypes.number.isRequired,\n  // gravatarEmail: PropTypes.string.isRequired,\n  dispatchScore: PropTypes.func.isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }).isRequired,\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  dispatchScore: (state) => dispatch(saveScore(state)),\n});\n\nconst mapStateToProps = (globalState) => ({\n  name: globalState.player.name,\n  gravatarEmail: globalState.player.gravatarEmail,\n  score: globalState.player.score,\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CardGame);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}